# -*- coding: utf-8 -*-
"""Prova Final DS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fIMZxPc4eq3QPNiZaU636bdzZw-JbHlt
"""

import matplotlib.pyplot as plt, pandas as pd, numpy as np, datetime as dt, sklearn
import pandas_datareader.data as web, statsmodels.api as sm, random
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.metrics import mean_squared_error

from sklearn.model_selection import TimeSeriesSplit
pd.set_option('display.max_rows', 50)
pd.set_option('display.max_columns', None)

dda = {433: 'Broad National Consumer Price Index (IPCA)',
      1207: 'GDP - Current prices',
      26941: 'Credit operations outstanding of individuals registered as MEI',
      26483: 'Interest rate by source of funds and type - microenterprise - earmarked credit - Housing financing - mortgage',
      26489: 'Interest rate by source of funds and type - microenterprise - earmarked credit - Microcredit',
      26463: 'Interest rate by source of funds and type - microenterprise - earmarked credit - Discount of credit card bills',
      1788: 'Monetary base (end-of-period balance)',
      24351: 'Capacity utilization – manufacturing industry',
      7355: 'Own electric charge (1992=100) - São Paulo',
      24348: 'Hours worked in production – manufacturing industry',
      1344: 'General capacity (capacidade industrial) (FGV)',
      24352: 'Capacity utilization – manufacturing industry (FGV)',
      1365: 'Food products capacity',
      1345: 'Consumer goods capacity',
      1373: 'Vehicles production (total)',
      1389: 'Crude oil production',
      1402: 'Brazil - energy consumption commercial',
      1403: 'Brazil - energy consumption residential',	
      1404: 'Brazil - energy consumption industrial',
      7357: 'Steel production',
      4393: 'Consumer confidence index',
      10777: 'Brasil (weekly) unemployment',
      21340: 'Residential Real Estate Collateral Value Index',
      27816: 'Non-residents assets (end-of-period balance)',
      27783: 'Currency outside banks (daily balance) - New',
      24021: 'Assets - Portfolio investment - Debt securities - Banks, except the central bank - Short-term - Position',
      24017: 'Assets - Portfolio investment - Equity and investment fund shares - Banks, except the central bank - Position',
      24045: 'Liabilities - Portfolio investment - Equity and investment fund shares - Position',
      24055: 'Liabilities - Other investment - Currency and deposits - Banks, except the central bank - Position',
      24057: 'Liabilities - Other investment - Loans - Banks, except the central bank - Position',
      23461: 'Current account - annual - net',
      23623: 'Financial account - annual - net',
      23611: 'Capital account - annual - net',
      3545: 'International reserves - Total - annual',
      3684: 'Gross External Debt	US$ (million)',
      3691: 'United States dollar (purchase) - end of period',
      21440: 'I006 - Return on Assets',
      21439: 'I007 - Return on Equity',
      21905: 'Interest margin',
      19882: 'Household debt to income',
      20400: 'Household debt without mortgage loans',
      3685: 'Net External Debt',
      19880: 'Household debt service ratio - Interest - Seasonally adjusted data',
      19879: 'Household debt service ratio - Principal - Seasonally adjusted data',
      28205: 'Loans from financial system to nonfinancial corporations and households',
      28204: 'Total loans to nonfinancial corporations and households',
      28206: 'Loans from other financial corporations to nonfinancial corporations and households',
      28852: 'Debt securities - Issued by nonfinancial corporations',
      20622: 'Credit outstanding / GDP',
      28868: 'Total credit to households (% of GDP)',
      27725: 'Credit outstanding to industrial sector - Infraestructure',
      27738: 'Credit outstanding to service sector - Real estate activities',
      27702: 'Credit by company size - Corporate Company',
      27701: 'Credit by company size - Micro, Small and Medium Enterprises (MSME)',
      22052: 'Credit outstanding - Private sector - Total',
      21082: '90 days past due loans/Credit outstanding - %',
      21003: 'Arrears/Credit outstanding - %'}

add = {v: k for k, v in dda.items()}

class economico:
  
  def __init__(self, nome):
    self.nome = nome 

  def serie(self):
    ppo = add.get(self.nome)
    pop = f"http://api.bcb.gov.br/dados/serie/bcdata.sgs.{ppo}/dados?formato=json"
    opp = pd.read_json(pop)     
    opp['valor'] = opp['valor'].replace(r'^\s*$', np.nan, regex=True).astype(float)
    opp['data'] = pd.to_datetime(opp['data'], format = '%d/%m/%Y')
    opp.columns = ['data',self.nome]
    return opp

de = pd.DataFrame(columns=['data'])
de['data'] = pd.to_datetime(de['data'], format = '%d/%m/%Y')

for i in add.keys():

  dd = economico(i).serie()

  de = pd.merge(de,dd, on='data', how='outer').sort_values(by='data').set_index('data')

df = de[de.index > '1994-06-01'].fillna(method='ffill').fillna(method='bfill')

x = df.drop('Broad National Consumer Price Index (IPCA)',axis=1)
y = df['Broad National Consumer Price Index (IPCA)']

clf = RandomForestRegressor(n_estimators=130,
                            max_depth = 8,
                            min_samples_split = 0.05)  

clf.fit(x, y)

ne = [120,130,130,110,130,130,110,110,110,130]
md = [7,9,5,8,4,6,8,6,8,8]
ms = [0.15,0.1,0.15,0.05,0.15,0.1,0.05,0.1,0.05,0.1]

for i, j, k in zip(ne,md,ms):

  x_train, x_test, y_train, y_test = train_test_split(x, y)

  clf = RandomForestRegressor(n_estimators=i,
                              max_depth = j,
                              min_samples_split = k)

  clf.fit(x_train, y_train)  

  y_pred = clf.predict(x_test)

  mse = mean_squared_error(y_test, y_pred)
  print(np.sqrt(mse))

y_pred = clf.predict(x) 

df['PRED'] = y_pred

jkl = pd.merge(df['PRED'], df['Broad National Consumer Price Index (IPCA)'],how='outer', on='data')

jkl